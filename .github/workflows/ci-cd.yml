name: Selective Build & Push Docker Images

on:
  push:
    branches: [ main ]

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      api-gateway: ${{ steps.filter.outputs.api-gateway }}
      workout-service: ${{ steps.filter.outputs.workout-service }}
      user-service: ${{ steps.filter.outputs.user-service }}
      auth-service: ${{ steps.filter.outputs.auth-service }}
      notification-service: ${{ steps.filter.outputs.notification-service }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Detect changed services
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            api-gateway:
              - 'api-gateway/**'
              - 'core/**'
              - 'proto-common/**'
              - 'pom.xml'
            workout-service:
              - 'workout-service/**'
              - 'core/**'
              - 'proto-common/**'
              - 'pom.xml'
            user-service:
              - 'user-service/**'
              - 'core/**'
              - 'proto-common/**'
              - 'pom.xml'
            auth-service:
              - 'auth-service/**'
              - 'core/**'
              - 'proto-common/**'
              - 'pom.xml'
            notification-service:
              - 'notification-service/**'
              - 'core/**'
              - 'proto-common/**'
              - 'pom.xml'

  generate-matrix:
    needs: detect-changes
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Generate matrix from changed services
        id: set-matrix
        run: |
          CHANGED_SERVICES=()
          [[ "${{ needs.detect-changes.outputs.api-gateway }}" == "true" ]] && CHANGED_SERVICES+=("api-gateway")
          [[ "${{ needs.detect-changes.outputs.workout-service }}" == "true" ]] && CHANGED_SERVICES+=("workout-service")
          [[ "${{ needs.detect-changes.outputs.user-service }}" == "true" ]] && CHANGED_SERVICES+=("user-service")
          [[ "${{ needs.detect-changes.outputs.auth-service }}" == "true" ]] && CHANGED_SERVICES+=("auth-service")
          [[ "${{ needs.detect-changes.outputs.notification-service }}" == "true" ]] && CHANGED_SERVICES+=("notification-service")

          if [ ${#CHANGED_SERVICES[@]} -eq 0 ]; then
            MATRIX='{"service":[]}'
          else
            JSON_ARRAY=$(printf '%s\n' "${CHANGED_SERVICES[@]}" | jq -R . | jq -s .)
            MATRIX=$(jq -n --argjson arr "$JSON_ARRAY" '{service: $arr}')
          fi

          echo "matrix<<EOF" >> $GITHUB_OUTPUT
          echo "$MATRIX" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  run-tests:
    needs: generate-matrix
    if: ${{ needs.generate-matrix.outputs.matrix != '{"service":[]}' }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.generate-matrix.outputs.matrix) }}
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Run tests for ${{ matrix.service }}
        run: |
          mvn -pl ${{ matrix.service }} -am test

  build-and-push:
    needs: [run-tests, generate-matrix]
    if: ${{ needs.generate-matrix.outputs.matrix != '{"service":[]}' }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.generate-matrix.outputs.matrix) }}
      fail-fast: false
    env:
      DOCKER_USER: ${{ secrets.DOCKER_USERNAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ env.DOCKER_USER }}/${{ matrix.service }}:latest
          cache-from: type=registry,ref=${{ env.DOCKER_USER }}/${{ matrix.service }}:cache
          cache-to: type=registry,ref=${{ env.DOCKER_USER }}/${{ matrix.service }}:cache,mode=max
